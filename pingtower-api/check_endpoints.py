#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import SessionLocal
from app.models.user import UserSelectedEndpoint
from app.models.resource import Endpoint, Resource
from sqlalchemy import text

def check_database_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É resources
        resources = db.query(Resource).all()
        print(f"üìä –†–µ—Å—É—Ä—Å—ã (resources): {len(resources)}")
        for resource in resources:
            print(f"  - ID: {resource.id}, Name: {resource.name}, URL: {resource.url}")
        
        print()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É endpoints
        endpoints = db.query(Endpoint).all()
        print(f"üìä –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã (endpoints): {len(endpoints)}")
        for endpoint in endpoints:
            print(f"  - ID: {endpoint.id}, Resource: {endpoint.resource_id}, Path: {endpoint.path}, Method: {endpoint.method}")
        
        print()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_selected_endpoints
        selected_endpoints = db.query(UserSelectedEndpoint).all()
        print(f"üìä –í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (user_selected_endpoints): {len(selected_endpoints)}")
        for selected in selected_endpoints:
            print(f"  - ID: {selected.id}, User: {selected.user_id}, Endpoint: {selected.endpoint_id}, Active: {selected.is_active}")
        
        print()
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º JOIN –∑–∞–ø—Ä–æ—Å (–∫–∞–∫ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
        query = db.query(
            UserSelectedEndpoint,
            Endpoint,
            Resource
        ).join(
            Endpoint, UserSelectedEndpoint.endpoint_id == Endpoint.id
        ).join(
            Resource, Endpoint.resource_id == Resource.id
        ).filter(
            UserSelectedEndpoint.is_active == True
        ).all()
        
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(query)}")
        for user_selected, endpoint, resource in query:
            print(f"  - User: {user_selected.user_id}")
            print(f"    Resource: {resource.name} ({resource.url})")
            print(f"    Endpoint: {endpoint.method} {endpoint.path}")
            print(f"    Full URL: {resource.url.rstrip('/')}/{endpoint.path.lstrip('/')}")
            print()
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∑–∞–ø—Ä–æ—Å–æ–º
        print("üìä SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        result = db.execute(text("""
            SELECT 
                use.id as user_selected_id,
                e.id as endpoint_id,
                r.id as resource_id,
                r.url as resource_url,
                e.path as endpoint_path,
                e.method as endpoint_method,
                use.user_id,
                use.is_active
            FROM user_selected_endpoints use
            JOIN endpoints e ON use.endpoint_id = e.id
            JOIN resources r ON e.resource_id = r.id
            WHERE use.is_active = true
        """))
        
        rows = result.fetchall()
        print(f"SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(rows)} –∑–∞–ø–∏—Å–µ–π")
        for row in rows:
            print(f"  - {dict(row._mapping)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    check_database_data()
