#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ ClickHouse —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
"""

import clickhouse_connect
from config import settings

class AdaptiveClickHouseClient:
    def __init__(self):
        self.client = None
        self.available_columns = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ ClickHouse"""
        self.client = clickhouse_connect.get_client(
            host=settings.CLICKHOUSE_HOST,
            port=settings.CLICKHOUSE_PORT,
            database=settings.CLICKHOUSE_DATABASE,
            username=settings.CLICKHOUSE_USER,
            password=settings.CLICKHOUSE_PASSWORD
        )
        return self.client
    
    def get_table_columns(self, table_name="checks"):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if self.available_columns is not None:
            return self.available_columns
        
        try:
            query = f"DESCRIBE {table_name}"
            result = self.client.query(query)
            self.available_columns = [row[0] for row in result.result_rows]
            return self.available_columns
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []
    
    def build_select_query(self, table_name="checks", where_clause="", limit=100):
        """–°—Ç—Ä–æ–∏—Ç SELECT –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
        columns = self.get_table_columns(table_name)
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
        required_columns = [
            'url', 'timestamp', 'success', 'error', 
            'response_time', 'status_code'
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        optional_columns = [
            'content_type', 'content_length', 'headers', 
            'is_https', 'redirect_chain', 'ssl_info', 
            'security_headers', 'technology_stack'
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        select_columns = []
        for col in required_columns + optional_columns:
            if col in columns:
                select_columns.append(col)
        
        if not select_columns:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        query = f"SELECT {', '.join(select_columns)} FROM {table_name}"
        
        if where_clause:
            query += f" WHERE {where_clause}"
        
        query += f" ORDER BY timestamp DESC LIMIT {limit}"
        
        return query, select_columns
    
    def get_checks_data(self, url, limit=100):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL"""
        if not self.client:
            self.connect()
        
        try:
            query, columns = self.build_select_query(
                where_clause="url = %(url)s",
                limit=limit
            )
            
            result = self.client.query(query, {'url': url})
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            data = []
            for row in result.result_rows:
                record = {}
                for i, col in enumerate(columns):
                    if i < len(row):
                        record[col] = row[i]
                    else:
                        record[col] = None
                data.append(record)
            
            return data, columns
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def test_adaptive_query():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    
    client = AdaptiveClickHouseClient()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        client.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        columns = client.get_table_columns()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {columns}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        data, used_columns = client.get_checks_data("https://example.com", limit=5)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {used_columns}")
        
        if data:
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:")
            for key, value in data[0].items():
                print(f"  {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_adaptive_query()
