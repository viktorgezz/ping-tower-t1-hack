#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ClickHouse
"""

import asyncio
from ai_agent import LogAnalyzer

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ClickHouse
test_data = [
    {
        'url': 'https://example.com',
        'timestamp': '2024-01-15 10:00:00',
        'success': 1,
        'error': None,
        'response_time': 0.25,
        'status_code': 200,
        'content_type': 'text/html',
        'content_length': 1024,
        'headers': {'Server': 'nginx', 'Content-Type': 'text/html'},
        'is_https': 1,
        'redirect_chain': []
    },
    {
        'url': 'https://example.com',
        'timestamp': '2024-01-15 10:05:00',
        'success': 1,
        'error': None,
        'response_time': 0.28,
        'status_code': 200,
        'content_type': 'text/html',
        'content_length': 1050,
        'headers': {'Server': 'nginx', 'Content-Type': 'text/html'},
        'is_https': 1,
        'redirect_chain': []
    },
    {
        'url': 'https://example.com',
        'timestamp': '2024-01-15 10:10:00',
        'success': 0,
        'error': 'Connection timeout',
        'response_time': 5.12,
        'status_code': 0,
        'content_type': None,
        'content_length': None,
        'headers': {},
        'is_https': 1,
        'redirect_chain': []
    },
    {
        'url': 'https://example.com',
        'timestamp': '2024-01-15 10:15:00',
        'success': 1,
        'error': None,
        'response_time': 0.31,
        'status_code': 200,
        'content_type': 'text/html',
        'content_length': 1100,
        'headers': {'Server': 'nginx', 'Content-Type': 'text/html'},
        'is_https': 1,
        'redirect_chain': []
    }
]

async def test_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    analyzer = LogAnalyzer()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        result = await analyzer.analyze_logs(test_data)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω!")
        print(f"üìä –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {result['type']}")
        
        if result['type'] == 'errors':
            data = result['data']
            print(f"\nüîç –û—à–∏–±–∫–∏:")
            for i, error in enumerate(data.get('errors', []), 1):
                print(f"  {i}. {error}")
            
            print(f"\nüìù –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:")
            print(f"  {data.get('error_analysis', 'N/A')}")
            
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(f"  {data.get('recommendations', 'N/A')}")
        
        else:
            data = result['data']
            print(f"\nüìà –û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:")
            print(f"  {data.get('general_characteristics', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_successful_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –î–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    successful_data = [log for log in test_data if log['success'] == 1]
    
    analyzer = LogAnalyzer()
    
    try:
        result = await analyzer.analyze_logs(successful_data)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {result['type']}")
        
        if result['type'] == 'status':
            data = result['data']
            print(f"\nüìà –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:")
            print(f"  {data.get('general_characteristics', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ClickHouse")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å –æ—à–∏–±–∫–∞–º–∏
    success1 = await test_analysis()
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    success2 = await test_successful_service()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –ê–Ω–∞–ª–∏–∑ —Å –æ—à–∏–±–∫–∞–º–∏: {'‚úÖ' if success1 else '‚ùå'}")
    print(f"  –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {'‚úÖ' if success2 else '‚ùå'}")
    
    if success1 and success2:
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"AI –∞–≥–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ClickHouse.")
    else:
        print(f"\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ AI –∞–≥–µ–Ω—Ç–∞.")

if __name__ == "__main__":
    asyncio.run(main())
