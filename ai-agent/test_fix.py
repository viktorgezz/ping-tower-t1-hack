#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
"""

import requests
import json

def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    base_url = "http://localhost:8001"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API...")
    
    # –¢–µ—Å—Ç health check
    try:
        response = requests.get(f"{base_url}/health")
        print(f"‚úÖ Health check: {response.status_code}")
        if response.status_code == 200:
            print(f"   –°—Ç–∞—Ç—É—Å: {response.json()}")
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    test_data = {
        "url": "https://example.com",
        "check_count": 5
    }
    
    try:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {test_data['url']}...")
        response = requests.post(f"{base_url}/analyze", json=test_data)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω!")
            print(f"   URL: {result['url']}")
            print(f"   –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {result['analysis_type']}")
            
            if result['analysis_type'] == 'errors':
                data = result['data']
                print(f"   –û—à–∏–±–∫–∏: {len(data.get('errors', []))}")
                if data.get('errors'):
                    print(f"   –ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞: {data['errors'][0]}")
            else:
                data = result['data']
                print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {data.get('general_characteristics', 'N/A')[:100]}...")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
            print(f"   –î–µ—Ç–∞–ª–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 50)
    
    if test_api():
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏.")
    else:
        print(f"\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞:")
        print(f"docker-compose logs -f")

if __name__ == "__main__":
    main()
