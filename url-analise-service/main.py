from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, HttpUrl
from typing import List, Dict, Optional
import asyncio
import json
import logging
import time
from kafka import KafkaProducer
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
from url_parser import URLService, SimpleURLScanner
from endpoint_tester import EndpointTester, monitor_endpoints
from config import settings
from telegram_service import telegram_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="URL Analysis Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ URL –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤",
    version="1.0.0"
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
class URLRequest(BaseModel):
    url: HttpUrl
    max_pages: Optional[int] = settings.DEFAULT_MAX_PAGES

class URLResponse(BaseModel):
    internal_urls: List[str]
    media_urls: List[str]
    visited_pages: int
    total_internal_urls: int
    total_media_urls: int

class EndpointTestRequest(BaseModel):
    urls: List[HttpUrl]
    max_concurrent: Optional[int] = settings.DEFAULT_MAX_CONCURRENT
    timeout: Optional[int] = settings.DEFAULT_TIMEOUT

class EndpointTestResponse(BaseModel):
    message: str
    total_urls: int
    kafka_topic: str
    batch_id: str

# Kafka Producer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class KafkaService:
    def __init__(self):
        self.producer = None
        self.kafka_bootstrap_servers = settings.KAFKA_BOOTSTRAP_SERVERS
        self.kafka_topic = settings.KAFKA_TOPIC
        
    def init_producer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka producer"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Kafka
            kafka_config = settings.get_kafka_config()
            
            # –°–æ–∑–¥–∞–µ–º producer —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            producer_config = {
                'bootstrap_servers': kafka_config['bootstrap_servers'],
                'value_serializer': lambda v: json.dumps(v, ensure_ascii=False).encode('utf-8'),
                'key_serializer': lambda k: k.encode('utf-8') if k else None,
                'security_protocol': kafka_config['security_protocol'],
                'sasl_mechanism': kafka_config['sasl_mechanism'],
                'sasl_plain_username': kafka_config['sasl_plain_username'],
                'sasl_plain_password': kafka_config['sasl_plain_password'],
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å kafka-python)
                'retries': 3,
                'retry_backoff_ms': 100,
                'request_timeout_ms': 30000,
                'max_block_ms': 10000,
                'acks': 'all',  # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö —Ä–µ–ø–ª–∏–∫
                'compression_type': 'gzip'  # –°–∂–∞—Ç–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
            }
            
            self.producer = KafkaProducer(**producer_config)
            logger.info(f"Kafka producer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {kafka_config['bootstrap_servers']}")
            logger.info(f"Kafka —Ç–æ–ø–∏–∫: {kafka_config['topic']}")
            logger.info(f"Kafka –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {kafka_config['sasl_plain_username']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka producer: {e}")
            raise HTTPException(status_code=500, detail=f"Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def send_results(self, results: List[Dict], request_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Kafka –∫–∞–∫ –æ–¥–∏–Ω —Ç–æ–ø–∏–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º JSON"""
        if not self.producer:
            self.init_producer()
        
        try:
            logger.info(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ {len(results)} –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í KAFKA –ö–ê–ö –û–î–ò–ù –¢–û–ü–ò–ö")
            logger.info(f"üìã Request ID: {request_id}")
            logger.info(f"üìã Kafka Topic: {self.kafka_topic}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            enriched_results = []
            for i, result in enumerate(results):
                logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç {i+1}/{len(results)}: {result.get('url', 'unknown')}")
                enriched_result = {
                    **result,
                    'request_id': request_id or f"req_{i}",
                    'batch_timestamp': result.get('timestamp'),
                    'service_version': '1.0.0'
                }
                enriched_results.append(enriched_result)
            
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(enriched_results)}")
            logger.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {type(enriched_results)} - —Å–ø–∏—Å–æ–∫ –∏–∑ {len(enriched_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù —Ç–æ–ø–∏–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ JSON)
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL!
            logger.info(f"üì§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –û–î–ò–ù –¢–û–ü–ò–ö –í KAFKA...")
            logger.info(f"üì§ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL!")
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            unique_key = f"{request_id}_{int(time.time() * 1000)}"
            logger.info(f"üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–ø–∏–∫–∞: {unique_key}")
            
            # –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –≤—ã–∑–æ–≤ producer.send() - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –æ–¥–∏–Ω —Ç–æ–ø–∏–∫
            future = self.producer.send(
                self.kafka_topic,
                key=unique_key,
                value=enriched_results  # –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –û–î–ò–ù —Ç–æ–ø–∏–∫
            )
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            record_metadata = future.get(timeout=10)
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–∞—Ä—Ç–∏—Ü–∏—é {record_metadata.partition}, offset {record_metadata.offset}")
            
            self.producer.flush()
            logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù –û–î–ò–ù –¢–û–ü–ò–ö —Å {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ Kafka: {self.kafka_topic}")
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –º–∞—Å—Å–∏–≤ JSON —Å {len(enriched_results)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ Kafka producer"""
        if self.producer:
            self.producer.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Kafka —Å–µ—Ä–≤–∏—Å–∞
kafka_service = KafkaService()

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "URL Analysis Service",
        "version": "1.0.0",
        "endpoints": {
            "parse_url": "/api/v1/parse-url",
            "test_endpoints": "/api/v1/test-endpoints"
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "url-analysis-service"}

@app.post("/api/v1/parse-url", response_model=URLResponse)
async def parse_website_urls(request: URLRequest):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ URL —Å–∞–π—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç URL —Å–∞–π—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL
    """
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL: {request.url}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º URLService –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        results = URLService.extract_urls(str(request.url), request.max_pages)
        
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(results['internal_urls'])} –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö URL –∏ {len(results['media_urls'])} –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤")
        
        return URLResponse(
            internal_urls=results['internal_urls'],
            media_urls=results['media_urls'],
            visited_pages=results['visited_pages'],
            total_internal_urls=len(results['internal_urls']),
            total_media_urls=len(results['media_urls'])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ URL {request.url}: {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ä–≤–∏—Å–∞
        try:
            telegram_service.send_service_error_notification(
                service_name="URL Parser",
                error_message=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {request.url}: {str(e)}"
            )
        except Exception as telegram_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")

@app.post("/api/v1/test-endpoints", response_model=EndpointTestResponse)
async def test_endpoints(request: EndpointTestRequest):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Kafka
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Kafka
    """
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(request.urls)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HttpUrl –≤ —Å—Ç—Ä–æ–∫–∏
        url_strings = [str(url) for url in request.urls]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        tester = EndpointTester(
            max_concurrent=request.max_concurrent,
            timeout=request.timeout
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(url_strings)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        try:
            results = await tester.test_multiple_endpoints(url_strings)
            logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Kafka
            request_id = f"test_{len(url_strings)}_{int(time.time())}"
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Kafka —Å request_id: {request_id}")
            kafka_service.send_results(results, request_id)
        finally:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await tester.close_session()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = sum(1 for r in results if r.get('success', False))
        avg_response_time = sum(r.get('response_time', 0) for r in results if r.get('success', False)) / max(successful, 1)
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{len(url_strings)}, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_response_time:.3f}s")
        
        return EndpointTestResponse(
            message=f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(url_strings)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤. –£—Å–ø–µ—à–Ω—ã—Ö: {successful}",
            total_urls=len(url_strings),
            kafka_topic=kafka_service.kafka_topic,
            batch_id=request_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ä–≤–∏—Å–∞
        try:
            telegram_service.send_service_error_notification(
                service_name="Endpoint Tester",
                error_message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {str(e)}"
            )
        except Exception as telegram_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    kafka_service.close()
    logger.info("–°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
