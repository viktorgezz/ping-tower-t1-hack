#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (URL Analysis Service + Kafka)
"""

import subprocess
import time
import sys
import os
from pathlib import Path

def run_command(command, background=False):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        if background:
            return subprocess.Popen(command, shell=True)
        else:
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
        return None

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker"""
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker Compose"""
    try:
        result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def start_with_docker():
    """–ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é Docker Compose"""
    print("üê≥ –ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é Docker Compose...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker-compose.yml
    if not Path('docker-compose.yml').exists():
        print("‚ùå –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    run_command('docker-compose down')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    result = run_command('docker-compose up -d')
    
    if result is not None:
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("   üåê URL Analysis Service: http://localhost:8000")
        print("   üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("   üìä Kafka UI: http://localhost:8080")
        print("   üì® Kafka: localhost:9092")
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        run_command('docker-compose ps')
        
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
        return False

def start_without_docker():
    """–ó–∞–ø—É—Å–∫ –±–µ–∑ Docker (—Ç–æ–ª—å–∫–æ Python —Å–µ—Ä–≤–∏—Å)"""
    print("üêç –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Python —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['main.py', 'url_parser.py', 'endpoint_tester.py', 'requirements.txt']
    missing_files = [f for f in required_files if not Path(f).exists()]
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    result = run_command('pip install -r requirements.txt')
    if result is None:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    print("üöÄ –ó–∞–ø—É—Å–∫ URL Analysis Service...")
    print("üìç –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Kafka –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ Docker")
    print("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        run_command('python start_service.py')
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ URL Analysis Service - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
    has_docker = check_docker()
    has_docker_compose = check_docker_compose()
    
    if has_docker and has_docker_compose:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞:")
        print("1. –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ —Å Docker (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. –¢–æ–ª—å–∫–æ Python —Å–µ—Ä–≤–∏—Å")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            success = start_with_docker()
        elif choice == "2":
            success = start_without_docker()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            success = False
    else:
        print("\n‚ö†Ô∏è  Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Python —Å–µ—Ä–≤–∏—Å...")
        success = start_without_docker()
    
    if success:
        print("\nüéâ –°–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
        sys.exit(1)

if __name__ == "__main__":
    main()
