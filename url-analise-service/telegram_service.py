"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import requests
import logging
from typing import Optional
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.config = settings.get_telegram_config()
        self.bot_token = self.config['bot_token']
        self.chat_id = self.config['chat_id']
        self.enabled = self.config['enabled']
        
    def send_message(self, message: str, parse_mode: str = 'HTML') -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        
        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode (str): –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled:
            logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
            
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id")
            return False
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        payload = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': parse_mode
        }
        
        try:
            response = requests.post(url, data=payload, timeout=10)
            response.raise_for_status()
            
            logger.info("Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_error_notification(self, url: str, status_code: int, error_message: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        
        Args:
            url (str): URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            status_code (int): HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            error_message (str): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        message = f"üö® <b>–û—à–∏–±–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞</b>\n\n"
        message += f"üîó <b>URL:</b> <code>{url}</code>\n"
        message += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status_code}</code>\n"
        
        if error_message:
            message += f"‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{error_message}</code>\n"
        
        message += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}"
        
        return self.send_message(message)
    
    def send_service_error_notification(self, service_name: str, error_message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            service_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        message = f"üö® <b>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
        message += f"üîß <b>–°–µ—Ä–≤–∏—Å:</b> <code>{service_name}</code>\n"
        message += f"‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{error_message}</code>\n"
        message += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}"
        
        return self.send_message(message)
    
    def send_monitoring_summary(self, total_urls: int, successful: int, failed: int, 
                              avg_response_time: float = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        
        Args:
            total_urls (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL
            successful (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            failed (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            avg_response_time (float): –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        message = f"üìä <b>–°–≤–æ–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        message += f"üîó <b>–í—Å–µ–≥–æ URL:</b> <code>{total_urls}</code>\n"
        message += f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> <code>{successful}</code>\n"
        message += f"‚ùå <b>–û—à–∏–±–æ–∫:</b> <code>{failed}</code>\n"
        
        if avg_response_time is not None:
            message += f"‚è±Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:</b> <code>{avg_response_time:.3f}s</code>\n"
        
        success_rate = (successful / total_urls * 100) if total_urls > 0 else 0
        message += f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:</b> <code>{success_rate:.1f}%</code>\n"
        
        message += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}"
        
        return self.send_message(message)
    
    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService()
