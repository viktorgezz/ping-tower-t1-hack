#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç–µ–∫–∞: API + Kafka
"""

import requests
import json
import time
import asyncio
from test_kafka_connection import test_kafka_producer, test_kafka_topics

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000"

def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API...")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        response.raise_for_status()
        result = response.json()
        print(f"‚úÖ API –∑–¥–æ—Ä–æ–≤: {result['status']}")
        return True
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_parse_url():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ URL"""
    print("\nüîç –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ URL...")
    try:
        url = f"{BASE_URL}/api/v1/parse-url"
        data = {
            "url": "https://httpbin.org",
            "max_pages": 3
        }
        
        response = requests.post(url, json=data, timeout=60)
        response.raise_for_status()
        
        result = response.json()
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:")
        print(f"   - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö URL: {result['total_internal_urls']}")
        print(f"   - –ú–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤: {result['total_media_urls']}")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {result['visited_pages']}")
        
        return result['internal_urls'][:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 URL
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

def test_endpoints_and_kafka(urls):
    """–¢–µ—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Kafka"""
    print("\nüîç –¢–µ—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ + Kafka...")
    
    if not urls:
        print("‚ùå –ù–µ—Ç URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        url = f"{BASE_URL}/api/v1/test-endpoints"
        data = {
            "urls": urls,
            "max_concurrent": 3,
            "timeout": 10
        }
        
        response = requests.post(url, json=data, timeout=120)
        response.raise_for_status()
        
        result = response.json()
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:")
        print(f"   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ URL: {result['total_urls']}")
        print(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
        print(f"   - Kafka —Ç–æ–ø–∏–∫: {result['kafka_topic']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_kafka_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka"""
    print("\nüîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
    cluster_ok = test_kafka_topics()
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    producer_ok = test_kafka_producer()
    
    return cluster_ok and producer_ok

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç–µ–∫–∞ URL Analysis Service")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not test_api_health():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:")
        print("   python start_service.py")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL
    parsed_urls = test_parse_url()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Kafka –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    kafka_ok = test_kafka_connection()
    
    if not kafka_ok:
        print("\n‚ö†Ô∏è  Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–∞—Ä—Å–∏–Ω–≥ -> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -> Kafka
    if parsed_urls:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_urls = parsed_urls + ["https://httpbin.org/get", "https://jsonplaceholder.typicode.com/posts/1"]
        
        success = test_endpoints_and_kafka(test_urls)
        
        if success:
            print("\nüéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ URL")
            print("   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
            print("   ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ")
    else:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    print("‚úÖ API —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ Kafka –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    if parsed_urls:
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ URL —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ö†Ô∏è  –ü–∞—Ä—Å–∏–Ω–≥ URL —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
    print("   üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("   üìä Kafka UI: http://localhost:8080 (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω —Å Docker)")
    print("   üîç Health check: http://localhost:8000/health")

if __name__ == "__main__":
    main()
